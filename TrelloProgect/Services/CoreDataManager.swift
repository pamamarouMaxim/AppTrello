//
//  CoreDataManager.swift
//  TrelloProgect
//
//  Created by Maxim Panamarou on 8/6/18.
//  Copyright © 2018 Maxim Panamarou. All rights reserved.
//

import Foundation
import Alamofire
import CoreData

//////////   //TODO: create convinience init with context and board
//////////   // TODO find autogenerated constansts for keys

class CoreDataManager {
  
  static let `default` = CoreDataManager()
  
  let api  =  ServerManager.default
  
  var readContext :  NSManagedObjectContext {
    let read = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)
    read.parent = persistentContainer.viewContext
    return read
  }
  
  var writeContext : NSManagedObjectContext {
    let read = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)
    read.parent = persistentContainer.viewContext
    return read
  }
  
  lazy var persistentContainer: NSPersistentContainer = {
    let container = NSPersistentContainer(name: "TrelloProgect")
    container.loadPersistentStores(completionHandler: { (_, error) in
      if let error = error as NSError? {
        fatalError("Unresolved error \(error), \(error.userInfo)")
      }
    })
    return container
  }()
  
   func saveContext () {
    if writeContext.hasChanges{
      trySave(Context: writeContext)
    }
    if readContext.hasChanges{
      trySave(Context: readContext)
    }
    if persistentContainer.viewContext.hasChanges {
      trySave(Context: persistentContainer.viewContext)
    }
  }
  
  private func trySave(Context context: NSManagedObjectContext){
    do {
      try context.save()
    } catch {
      let nserror = error as NSError
      fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
    }
  }
  
  
  func postBoard(withName name : String, color : String , completion: @escaping (Error?)  -> Void )  {
    api.postBoardwithName(name, color: color) {[weak self](response) in
      switch response{
      case .success(let board) :
        guard let context = self?.writeContext else {return}
        let entity = NSEntityDescription.entity(forEntityName: "BoardEntity", in: context)
        guard let boardEntity = entity else {return}
        _ = BoardEntity(entity: boardEntity, insertInto: context, board: board)
        self?.saveContext()
        completion(nil)
      case .failure(let error) : completion(error)
      }
    }
  }
  
  func getAllBoardWithComplitionBlock(_ completion : @escaping (Error?) -> Void) {
    api.getAllBoardWithBlock { [weak self](response) in
      switch response{
      case .success(let boards):
        guard let context = self?.writeContext else {return}
        let entity = NSEntityDescription.entity(forEntityName: "BoardEntity", in: context)
        guard let boardEntity = entity else {return}
        for board in boards{
          _  = BoardEntity(entity: boardEntity, insertInto: context, board: board)
        }
        self?.saveContext()
        completion(nil)
      case .failure(let error)   : completion(error)
      }
    }
  }
  
  func getListsFromBoard(_ id : String, completion : @escaping (Error?) -> Void)  {
    api.getListsForBoard(id) { [weak self](response) in
      switch response{
      case .success(let lists) :
        guard let context = self?.writeContext else {return}
        
        let request = BoardEntity.fetchRequest() as NSFetchRequest
        let predicate = NSPredicate(format: "id == %@", id)
        request.predicate = predicate
        do {
          let result = try context.fetch(request)
          if let first = result.first{
            context.delete(first)
          }
        } catch {
          completion(nil)
        }
        
      
        let entity = NSEntityDescription.entity(forEntityName: "ListEntity", in: context)
         guard let listEntity = entity else {return}
        for list in lists{
        _ = ListEnity(entity: listEntity, insertInto: context, list: list)
        }
       
        self?.saveContext()
       
        completion(nil)
      case .failure(let error)   : completion(error)
      }
    }
  }
  
  func   postNewList(withName name : String,boardId : String,completion : @escaping (Error?) -> Void) {
    api.makeNewListInBoard(boardId, nameList: name) { [weak self](result) in
      switch result{
      case .success(let list) :
        guard let context = self?.writeContext else {return}
        let entity = NSEntityDescription.entity(forEntityName: "ListEntity", in: context)
        guard let listEntity = entity else {return}
        let list = ListEnity(entity: listEntity, insertInto: context, list: list)
        let request = BoardEntity.fetchRequest() as NSFetchRequest
        let predicate = NSPredicate(format: "id == %@", boardId)
        request.predicate = predicate
        do {
          let board = try context.fetch(request)
          if let first = board.first{
            first.addToLists(list)
          }
        } catch {
          
        }
        self?.saveContext()
        completion(nil)
      case .failure(let error) : completion(error)
      }
    }
  }
  
  
  //TODO : дергать борд лист 
  func getCardsFromList(withId id: String, comletion : @escaping (Error?) -> Void) {
    api.getCardsForListId(id) { [weak self](result) in
      switch result{
      case .success(let cards) :
        guard let context = self?.writeContext else {return}
        let entity = NSEntityDescription.entity(forEntityName: "CardEntity", in: context)
        guard let cardEntity = entity else {return}
        var cardsEntity = [CardEntity]()
        for card in cards{
            let cardEntity = CardEntity(entity: cardEntity, insertInto: context, card: card)
          cardsEntity.append(cardEntity)
        }
        let request = ListEnity.fetchRequest() as NSFetchRequest
        let predicate = NSPredicate(format: "id == %@", id)
        request.predicate = predicate
        do {
          let result = try context.fetch(request)
          if let listEntity = result.first{
            listEntity.addToCardsRelationship(NSSet(array: cardsEntity))
          }
        } catch {
          
        }
        self?.saveContext()
        comletion(nil)
      case .failure(let error) : comletion(error)
      }
    }
  }
  
  func  postNewCardFromList(withId id: String,  name : String, completion : @escaping (Error?)-> Void) {
    api.postNewCardForListId(id, nameOfCard: name) { [weak self](result) in
      switch result{
      case .success(let card) :
        guard let context = self?.writeContext else {return}
        let entity = NSEntityDescription.entity(forEntityName: "CardEntity", in: context)
        guard let cardEntity = entity else {return}
        let entityCard = CardEntity(entity: cardEntity, insertInto: context, card: card)
        let request = ListEnity.fetchRequest() as NSFetchRequest
        let predicate = NSPredicate(format: "id == %@", id)
        request.predicate = predicate
        do {
          let result = try context.fetch(request)
          if let listEntity = result.first{
            listEntity.addToCardsRelationship(entityCard)
          }
        } catch {
          
        }
        self?.saveContext()
        completion(nil)
      case .failure(let error) : completion(error)
      }
    }
  }
  

}
